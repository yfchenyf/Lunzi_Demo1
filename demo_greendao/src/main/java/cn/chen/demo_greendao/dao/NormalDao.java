package cn.chen.demo_greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.chen.demo_greendao.entity.Normal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NORMAL".
*/
public class NormalDao extends AbstractDao<Normal, Long> {

    public static final String TABLENAME = "NORMAL";

    /**
     * Properties of entity Normal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property TestInt = new Property(2, int.class, "testInt", false, "TEST_INT");
        public final static Property TestStr = new Property(3, String.class, "testStr", false, "TEST_STR");
        public final static Property TestInt1 = new Property(4, String.class, "testInt1", false, "TEST_INT1");
        public final static Property A = new Property(5, String.class, "a", false, "A");
        public final static Property B = new Property(6, String.class, "b", false, "B");
        public final static Property C = new Property(7, String.class, "c", false, "C");
        public final static Property D = new Property(8, Integer.class, "d", false, "D");
    };


    public NormalDao(DaoConfig config) {
        super(config);
    }
    
    public NormalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NORMAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TEST_INT\" INTEGER NOT NULL ," + // 2: testInt
                "\"TEST_STR\" TEXT," + // 3: testStr
                "\"TEST_INT1\" TEXT," + // 4: testInt1
                "\"A\" TEXT," + // 5: a
                "\"B\" TEXT," + // 6: b
                "\"C\" TEXT," + // 7: c
                "\"D\" INTEGER);"); // 8: d
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NORMAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Normal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTestInt());
 
        String testStr = entity.getTestStr();
        if (testStr != null) {
            stmt.bindString(4, testStr);
        }
 
        String testInt1 = entity.getTestInt1();
        if (testInt1 != null) {
            stmt.bindString(5, testInt1);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(6, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(7, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(8, c);
        }
 
        Integer d = entity.getD();
        if (d != null) {
            stmt.bindLong(9, d);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Normal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getTestInt());
 
        String testStr = entity.getTestStr();
        if (testStr != null) {
            stmt.bindString(4, testStr);
        }
 
        String testInt1 = entity.getTestInt1();
        if (testInt1 != null) {
            stmt.bindString(5, testInt1);
        }
 
        String a = entity.getA();
        if (a != null) {
            stmt.bindString(6, a);
        }
 
        String b = entity.getB();
        if (b != null) {
            stmt.bindString(7, b);
        }
 
        String c = entity.getC();
        if (c != null) {
            stmt.bindString(8, c);
        }
 
        Integer d = entity.getD();
        if (d != null) {
            stmt.bindLong(9, d);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Normal readEntity(Cursor cursor, int offset) {
        Normal entity = new Normal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // testInt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // testStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // testInt1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // a
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // b
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // c
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // d
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Normal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTestInt(cursor.getInt(offset + 2));
        entity.setTestStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTestInt1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setA(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setB(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setD(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Normal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Normal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
